(window.webpackJsonp=window.webpackJsonp||[]).push([[25],{174:function(e,t,a){"use strict";a.r(t);var s=a(0),n=Object(s.a)({},function(){this.$createElement;this._self._c;return this._m(0)},[function(){var e=this,t=e.$createElement,a=e._self._c||t;return a("div",{staticClass:"content"},[a("p",[a("strong",[e._v("#{}和${}的区别是什么？")])]),a("p",[e._v("答：${}是Properties文件中的变量占位符，它可以用于标签属性值和sql内部，属于静态文本替换，比如${driver}会被静态替换为com.mysql.jdbc.Driver。#{}是sql的参数占位符，Mybatis会将sql中的#{}替换为?号，在sql执行前会使用PreparedStatement的参数设置方法，按序给sql的?号占位符设置参数值，比如ps.setInt(0, parameterValue)，#{item.name}的取值方式为使用反射从参数对象中获取item对象的name属性值，相当于param.getItem().getName()。")]),a("p",[a("strong",[e._v("Xml映射文件中，除了常见的select|insert|updae|delete标签之外，还有哪些标签？")])]),a("p",[e._v("答：还有很多其他的标签，"),a("code",[e._v("<resultMap>")]),e._v("、"),a("code",[e._v("<parameterMap>")]),e._v("、"),a("code",[e._v("<sql>")]),e._v("、"),a("code",[e._v("<include>")]),e._v("、"),a("code",[e._v("<selectKey>")]),e._v("，加上动态sql的9个标签，trim|where|set|foreach|if|choose|when|otherwise|bind等，其中"),a("code",[e._v("<sql>")]),e._v("为sql片段标签，通过"),a("code",[e._v("<include>")]),e._v("标签引入sql片段，"),a("code",[e._v("<selectKey>")]),e._v("为不支持自增的主键生成策略标签。")]),a("p",[a("strong",[e._v("最佳实践中，通常一个Xml映射文件，都会写一个Dao接口与之对应，请问，这个Dao接口的工作原理是什么？Dao接口里的方法，参数不同时，方法能重载吗？")])]),a("p",[e._v("答：Dao接口，就是人们常说的Mapper接口，接口的全限名，就是映射文件中的namespace的值，接口的方法名，就是映射文件中MappedStatement的id值，接口方法内的参数，就是传递给sql的参数。Mapper接口是没有实现类的，当调用接口方法时，接口全限名+方法名拼接字符串作为key值，可唯一定位一个MappedStatement，举例：com.mybatis3.mappers.StudentDao.findStudentById，可以唯一找到namespace为com.mybatis3.mappers.StudentDao下面id = findStudentById的MappedStatement。在Mybatis中，每一个"),a("code",[e._v("<select>")]),e._v("、"),a("code",[e._v("<insert>")]),e._v("、"),a("code",[e._v("<update>")]),e._v("、"),a("code",[e._v("<delete>")]),e._v("标签，都会被解析为一个MappedStatement对象。")]),a("p",[e._v("Dao接口里的方法，是不能重载的，因为是全限名+方法名的保存和寻找策略。")]),a("p",[e._v("Dao接口的工作原理是JDK动态代理，Mybatis运行时会使用JDK动态代理为Dao接口生成代理proxy对象，代理对象proxy会拦截接口方法，转而执行MappedStatement所代表的sql，然后将sql执行结果返回。")]),a("p",[a("strong",[e._v("Mybatis是如何进行分页的？分页插件的原理是什么？")])]),a("p",[e._v("答：Mybatis使用RowBounds对象进行分页，它是针对ResultSet结果集执行的内存分页，而非物理分页，可以在sql内直接书写带有物理分页的参数来完成物理分页功能，也可以使用分页插件来完成物理分页。")]),a("p",[e._v("分页插件的基本原理是使用Mybatis提供的插件接口，实现自定义插件，在插件的拦截方法内拦截待执行的sql，然后重写sql，根据dialect方言，添加对应的物理分页语句和物理分页参数。")]),a("p",[e._v("举例：select * from student，拦截sql后重写为：select t.* from （select * from student）t limit 0，10")]),a("p",[a("strong",[e._v("简述Mybatis的插件运行原理，以及如何编写一个插件。")])]),a("p",[e._v("答：Mybatis仅可以编写针对ParameterHandler、ResultSetHandler、StatementHandler、Executor这4种接口的插件，Mybatis使用JDK的动态代理，为需要拦截的接口生成代理对象以实现接口方法拦截功能，每当执行这4种接口对象的方法时，就会进入拦截方法，具体就是InvocationHandler的invoke()方法，当然，只会拦截那些你指定需要拦截的方法。")]),a("p",[e._v("实现Mybatis的Interceptor接口并复写intercept()方法，然后在给插件编写注解，指定要拦截哪一个接口的哪些方法即可，记住，别忘了在配置文件中配置你编写的插件。")]),a("p",[a("strong",[e._v("Mybatis动态sql是做什么的？都有哪些动态sql？能简述一下动态sql的执行原理不？")])]),a("p",[e._v("答：Mybatis动态sql可以让我们在Xml映射文件内，以标签的形式编写动态sql，完成逻辑判断和动态拼接sql的功能，Mybatis提供了9种动态sql标签trim|where|set|foreach|if|choose|when|otherwise|bind。")]),a("p",[e._v("其执行原理为，使用OGNL从sql参数对象中计算表达式的值，根据表达式的值动态拼接sql，以此来完成动态sql的功能。")]),a("p",[a("strong",[e._v("Mybatis是如何将sql执行结果封装为目标对象并返回的？都有哪些映射形式？")])]),a("p",[e._v("答：第一种是使用"),a("code",[e._v("<resultMap>")]),e._v("标签，逐一定义列名和对象属性名之间的映射关系。第二种是使用sql列的别名功能，将列别名书写为对象属性名，比如T_NAME AS NAME，对象属性名一般是name，小写，但是列名不区分大小写，Mybatis会忽略列名大小写，智能找到与之对应对象属性名，你甚至可以写成T_NAME AS NaMe，Mybatis一样可以正常工作。")]),a("p",[e._v("有了列名与属性名的映射关系后，Mybatis通过反射创建对象，同时使用反射给对象的属性逐一赋值并返回，那些找不到映射关系的属性，是无法完成赋值的。")]),a("p",[a("strong",[e._v("Mybatis的Xml映射文件中，不同的Xml映射文件，id是否可以重复？")])]),a("p",[e._v("答：不同的Xml映射文件，如果配置了namespace，那么id可以重复；如果没有配置namespace，那么id不能重复；毕竟namespace不是必须的，只是最佳实践而已。")]),a("p",[e._v("原因就是namespace+id是作为Map<String, MappedStatement>的key使用的，如果没有namespace，就剩下id，那么，id重复会导致数据互相覆盖。有了namespace，自然id就可以重复，namespace不同，namespace+id自然也就不同。")]),a("p",[a("strong",[e._v("Mybatis中如何执行批处理？")])]),a("p",[e._v("答：使用BatchExecutor完成批处理。")]),a("p",[a("strong",[e._v("Mybatis都有哪些Executor执行器？它们之间的区别是什么？")])]),a("p",[e._v("答：Mybatis有三种基本的Executor执行器，SimpleExecutor、ReuseExecutor、BatchExecutor。")]),a("p",[e._v("SimpleExecutor：每执行一次update或select，就开启一个Statement对象，用完立刻关闭Statement对象。")]),a("p",[e._v("ReuseExecutor：执行update或select，以sql作为key查找Statement对象，存在就使用，不存在就创建，用完后，不关闭Statement对象，而是放置于Map<String, Statement>内，供下一次使用。简言之，就是重复使用Statement对象。")]),a("p",[e._v("BatchExecutor：执行update（没有select，JDBC批处理不支持select），将所有sql都添加到批处理中（addBatch()），等待统一执行（executeBatch()），它缓存了多个Statement对象，每个Statement对象都是addBatch()完毕后，等待逐一执行executeBatch()批处理。与JDBC批处理相同。")]),a("p",[e._v("作用范围：Executor的这些特点，都严格限制在SqlSession生命周期范围内。")]),a("p",[a("strong",[e._v("Mybatis中如何指定使用哪一种Executor执行器？")])]),a("p",[e._v("答：在Mybatis配置文件中，可以指定默认的ExecutorType执行器类型，也可以手动给DefaultSqlSessionFactory的创建SqlSession的方法传递ExecutorType类型参数。")]),a("p",[a("strong",[e._v("mybatis优点")])]),a("p",[e._v("简单易学：本身就很小且简单。没有任何第三方依赖，最简单安装只要两个jar文件+配置几个sql映射文件易于学习，易于使用，通过文档和源代码，可以比较完全的掌握它的设计思路和实现。\n灵活：mybatis不会对应用程序或者数据库的现有设计强加任何影响。 sql写在xml里，便于统一管理和优化。通过sql基本上可以实现我们不使用数据访问框架可以实现的所有功能，或许更多。\n解除sql与程序代码的耦合：通过提供DAL层，将业务逻辑和数据访问逻辑分离，使系统的设计更清晰，更易维护，更易单元测试。sql和代码的分离，提高了可维护性。\n提供映射标签，支持对象与数据库的orm字段关系映射\n提供对象关系映射标签，支持对象关系组建维护\n提供xml标签，支持编写动态sql。")]),a("p",[a("strong",[e._v("缺点")])]),a("ul",[a("li",[e._v("编写SQL语句时工作量很大，尤其是字段多、关联表多时，更是如此。")]),a("li",[e._v("SQL语句依赖于数据库，导致数据库移植性差，不能更换数据库。")]),a("li",[e._v("框架还是比较简陋，功能尚有缺失，虽然简化了数据绑定代码，但是整个底层数据库查询实际还是要自己写的，工作量也比较大，而且不太容易适应快速数据库修改。")]),a("li",[e._v("二级缓存机制不佳")])]),a("p",[a("strong",[e._v("mybatis 和 Hibernate的比较")]),e._v("\n第一方面：开发速度的对比")]),a("p",[e._v("就开发速度而言，Hibernate的真正掌握要比Mybatis来得难些。Mybatis框架相对简单很容易上手，但也相对简陋些。个人觉得要用好Mybatis还是首先要先理解好Hibernate。")]),a("p",[e._v("比起两者的开发速度，不仅仅要考虑到两者的特性及性能，更要根据项目需求去考虑究竟哪一个更适合项目开发，比如：一个项目中用到的复杂查询基本没有，就是简单的增删改查，这样选择hibernate效率就很快了，因为基本的sql语句已经被封装好了，根本不需要你去写sql语句，这就节省了大量的时间，但是对于一个大型项目，复杂语句较多，这样再去选择hibernate就不是一个太好的选择，选择mybatis就会加快许多，而且语句的管理也比较方便。")]),a("p",[e._v("第二方面：开发工作量的对比")]),a("p",[e._v("Hibernate和MyBatis都有相应的代码生成工具。可以生成简单基本的DAO层方法。针对高级查询，Mybatis需要手动编写SQL语句，以及ResultMap。而Hibernate有良好的映射机制，开发者无需关心SQL的生成与结果映射，可以更专注于业务流程。")]),a("p",[e._v("第三方面：sql优化方面")]),a("p",[e._v("Hibernate的查询会将表中的所有字段查询出来，这一点会有性能消耗。Hibernate也可以自己写SQL来指定需要查询的字段，但这样就破坏了Hibernate开发的简洁性。而Mybatis的SQL是手动编写的，所以可以按需求指定查询的字段。")]),a("p",[e._v("Hibernate HQL语句的调优需要将SQL打印出来，而Hibernate的SQL被很多人嫌弃因为太丑了。MyBatis的SQL是自己手动写的所以调整方便。但Hibernate具有自己的日志统计。Mybatis本身不带日志统计，使用Log4j进行日志记录。")]),a("p",[e._v("第四方面：对象管理的对比")]),a("p",[e._v("Hibernate 是完整的对象/关系映射解决方案，它提供了对象状态管理（state management）的功能，使开发者不再需要理会底层数据库系统的细节。也就是说，相对于常见的 JDBC/SQL 持久层方案中需要管理 SQL 语句，Hibernate采用了更自然的面向对象的视角来持久化 Java 应用中的数据。")]),a("p",[e._v("换句话说，使用 Hibernate 的开发者应该总是关注对象的状态（state），不必考虑 SQL 语句的执行。这部分细节已经由 Hibernate 掌管妥当，只有开发者在进行系统性能调优的时候才需要进行了解。而MyBatis在这一块没有文档说明，用户需要对对象自己进行详细的管理。")]),a("p",[e._v("第五方面：缓存机制")])])}],!1,null,null,null);t.default=n.exports}}]);