(window.webpackJsonp=window.webpackJsonp||[]).push([[23],{152:function(n,a,e){"use strict";e.r(a);var t=e(0),i=Object(t.a)({},function(){this.$createElement;this._self._c;return this._m(0)},[function(){var n=this,a=n.$createElement,e=n._self._c||a;return e("div",{staticClass:"content"},[e("h2",{attrs:{id:"java-基础部分"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#java-基础部分","aria-hidden":"true"}},[n._v("#")]),n._v(" java 基础部分")]),e("p",[e("strong",[n._v("什么是线程局部变量？")])]),e("p",[n._v("线程局部变量是局限于线程内部的变量，属于线程自身所有，不在多个线程间共享。Java 提供 ThreadLocal 类来支持线程局部变量，是一种实现线程安全的方式。但是在管理环境下（如 web 服务器）使用线程局部变量的时候要特别小心，在这种情况下，工作线程的生命周期比任何应用变量的生命周期都要长。任何线程局部变量一旦在工作完成后没有释放，Java 应用就存在内存泄露的风险。")]),e("p",[e("strong",[n._v("用 wait-notify 写一段代码来解决生产者-消费者问题？")])]),e("p",[n._v("只要记住在同步块中调用 wait() 和 notify()方法，如果阻塞，通过循环来测试等待条件。")]),e("p",[e("strong",[n._v("用 Java 写一个线程安全的单例模式（Singleton）？")])]),e("p",[n._v("这里面一步一步教你创建一个线程安全的 Java 单例类。当我们说线程安全时，意思是即使初始化是在多线程环境中，仍然能保证单个实例。Java 中，使用枚举作为单例类是最简单的方式来创建线程安全单例模式的方式。")]),e("p",[e("strong",[n._v("Java 中 sleep 方法和 wait 方法的区别")])]),e("p",[n._v("虽然两者都是用来暂停当前运行的线程，但是 sleep() 实际上只是短暂停顿，因为它不会释放锁，而 wait() 意味着条件等待，这就是为什么该方法要释放锁，因为只有这样，其他等待的线程才能在满足条件时获取到该锁。")]),e("p",[e("strong",[n._v("什么是不可变对象（immutable object）？Java 中怎么创建一个不可变对象？")])]),e("p",[n._v("不可变对象指对象一旦被创建，状态就不能再改变。任何修改都会创建一个新的对象，如 String、Integer及其它包装类。详情参见答案，一步一步指导你在 Java 中创建一个不可变的类。")]),e("p",[e("strong",[n._v("我们能创建一个包含可变对象的不可变对象吗？")])]),e("p",[n._v("是的，我们是可以创建一个包含可变对象的不可变对象的，你只需要谨慎一点，不要共享可变对象的引用就可以了，如果需要变化时，就返回原对象的一个拷贝。最常见的例子就是对象中包含一个日期对象的引用。")]),e("p",[e("strong",[n._v("Java 中应该使用什么数据类型来代表价格？")])]),e("p",[n._v("如果不是特别关心内存和性能的话，使用BigDecimal，否则使用预定义精度的 double 类型。")]),e("p",[e("strong",[n._v("怎么将 byte 转换为 String？")])]),e("p",[n._v("可以使用 String 接收 byte[] 参数的构造器来进行转换，需要注意的点是要使用的正确的编码，否则会使用平台默认编码，这个编码可能跟原来的编码相同，也可能不同。")]),e("p",[e("strong",[n._v("Java 中 ++ 操作符是线程安全的吗？")]),n._v("\n不是线程安全的操作。它涉及到多个指令，如读取变量值，增加，然后存储回内存，这个过程可能会出现多个线程交差。")]),e("p",[e("strong",[n._v("a = a + b 与 a += b 的区别")])]),e("p",[n._v("+= 隐式的将加操作的结果类型强制转换为持有结果的类型。如果两这个整型相加，如 byte、short 或者 int，首先会将它们提升到 int 类型，然后在执行加法操作。如果加法操作的结果比 a 的最大值要大，则 a+b 会出现编译错误，但是 a += b 没问题，如下：\nbyte a = 127;\nbyte b = 127;\nb = a + b; // error : cannot convert from int to byte\nb += a; // ok\n（译者注：这个地方应该表述的有误，其实无论 a+b 的值为多少，编译器都会报错，因为 a+b 操作会将 a、b 提升为 int 类型，所以将 int 类型赋值给 byte 就会编译出错）")]),e("p",[e("strong",[n._v("int 和 Integer 哪个会占用更多的内存？")])]),e("p",[n._v("Integer 对象会占用更多的内存。Integer 是一个对象，需要存储对象的元数据。但是 int 是一个原始类型的数据，所以占用的空间更少。")]),e("p",[e("strong",[n._v("为什么 Java 中的 String 是不可变的（Immutable）")])]),e("p",[n._v("Java 中的 String 不可变是因为 Java 的设计者认为字符串使用非常频繁，将字符串设置为不可变可以允许多个客户端之间共享相同的字符串。")]),e("p",[e("strong",[n._v("Java 中 WeakReference 与 SoftReference的区别？")]),n._v("\n虽然 WeakReference 与 SoftReference 都有利于提高 GC 和 内存的效率，但是 WeakReference ，一旦失去最后一个强引用，就会被 GC 回收，而软引用虽然不能阻止被回收，但是可以延迟到 JVM 内存不足的时候。")]),e("p",[e("strong",[n._v("JRE、JDK、JVM 及 JIT 之间有什么不同？")])]),e("p",[n._v("JRE 代表 Java 运行时（Java run-time），是运行 Java 引用所必须的。JDK 代表 Java 开发工具（Java development kit），是 Java 程序的开发工具，如 Java 编译器，它也包含 JRE。JVM 代表 Java 虚拟机（Java virtual machine），它的责任是运行 Java 应用。JIT 代表即时编译（Just In Time compilation），当代码执行的次数超过一定的阈值时，会将 Java 字节码转换为本地代码，如，主要的热点代码会被准换为本地代码，这样有利大幅度提高 Java 应用的性能。")]),e("p",[e("strong",[n._v("解释 Java 堆空间及 GC？")]),n._v("\n当通过 Java 命令启动 Java 进程的时候，会为它分配内存。内存的一部分用于创建堆空间，当程序中创建对象的时候，就从对空间中分配内存。GC 是 JVM 内部的一个进程，回收无效对象的内存用于将来的分配。")]),e("p",[e("strong",[n._v("final、finalize 和 finally 的不同之处?")]),n._v("\nfinal 是一个修饰符，可以修饰变量、方法和类。如果 final 修饰变量，意味着该变量的值在初始化后不能被改变。finalize 方法是在对象被回收之前调用的方法，给对象自己最后一个复活的机会，但是什么时候调用 finalize 没有保证。finally 是一个关键字，与 try 和 catch 一起用于异常的处理。finally 块一定会被执行，无论在 try 块中是否有发生异常。")]),e("p",[e("strong",[n._v("List、Set、Map 和 Queue 之间的区别")]),n._v("\nList 是一个有序集合，允许元素重复。它的某些实现可以提供基于下标值的常量访问时间，但是这不是 List 接口保证的。Set 是一个无序集合。")]),e("p",[e("strong",[n._v("ArrayList 与 LinkedList 的不区别?")]),n._v("\n最明显的区别是 ArrrayList 底层的数据结构是数组，支持随机访问，而 LinkedList 的底层数据结构书链表，不支持随机访问。使用下标访问一个元素，ArrayList 的时间复杂度是 O(1)，而 LinkedList 是 O(n)。更多细节的讨论参见答案。")]),e("p",[e("strong",[n._v("用哪两种方式来实现集合的排序？")]),n._v("\n你可以使用有序集合，如 TreeSet 或 TreeMap，你也可以使用有顺序的的集合，如 list，然后通过 Collections.sort() 来排序。")]),e("p",[e("strong",[n._v("lambda表达式")])]),e("h2",{attrs:{id:"spring"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#spring","aria-hidden":"true"}},[n._v("#")]),n._v(" Spring")]),e("p",[e("strong",[n._v("使用Spring框架的好处是什么？")])]),e("ul",[e("li",[n._v("轻量：Spring 是轻量的，基本的版本大约2MB")]),e("li",[n._v("控制反转：Spring通过控制反转实现了松散耦合，对象们给出它们的依赖，而不是创建或查找依赖的对象们")]),e("li",[n._v("面向切面的编程(AOP)：Spring支持面向切面的编程，并且把应用业务逻辑和系统服务分开")]),e("li",[n._v("容器：Spring 包含并管理应用中对象的生命周期和配置")]),e("li",[n._v("MVC框架：Spring的WEB框架是个精心设计的框架，是Web框架的一个很好的替代品")]),e("li",[n._v("事务管理：Spring 提供一个持续的事务管理接口，可以扩展到上至本地事务下至全局事务（JTA）")]),e("li",[n._v("异常处理：Spring 提供方便的API把具体技术相关的异常（比如由JDBC，Hibernate or JDO抛出的）转化为一致的unchecked 异常")])]),e("p",[e("strong",[n._v("什么是Spring IOC 容器？")])]),e("p",[n._v("Spring IOC 负责创建对象，管理对象（通过依赖注入（DI），装配对象，配置对象，并且管理这些对象的整个生命周期。")]),e("p",[e("strong",[n._v("ApplicationContext通常的实现是什么？")])]),e("ul",[e("li",[n._v("FileSystemXmlApplicationContext ：此容器从一个XML文件中加载beans的定义，XML Bean 配置文件的全路径名必须提供给它的构造函数。")]),e("li",[n._v("ClassPathXmlApplicationContext：此容器也从一个XML文件中加载beans的定义，这里，你需要正确设置classpath因为这个容器将在classpath里找bean配置。")]),e("li",[n._v("WebXmlApplicationContext：此容器加载一个XML文件，此文件定义了一个WEB应用的所有bean。")])]),e("p",[e("strong",[n._v("什么是Spring的依赖注入？")])]),e("p",[n._v("依赖注入，是IOC的一个方面，是个通常的概念，它有多种解释。这概念是说你不用创建对象，而只需要描述它如何被创建。你不在代码里直接组装你的组件和服务，但是要在配置文件里描述哪些组件需要哪些服务，之后一个容器（IOC容器）负责把他们组装起来。")]),e("p",[e("strong",[n._v("有哪些不同类型的IOC（依赖注入）方式？")])]),e("ul",[e("li",[n._v("构造器依赖注入：构造器依赖注入通过容器触发一个类的构造器来实现的，该类有一系列参数，每个参数代表一个对其他类的依赖。")]),e("li",[n._v("Setter方法注入：Setter方法注入是容器通过调用无参构造器或无参static工厂 方法实例化bean之后，调用该bean的setter方法，即实现了基于setter的依赖注入。")])]),e("p",[e("strong",[n._v("什么是Spring beans？")])]),e("p",[n._v("Spring beans 是那些形成Spring应用的主干的java对象。它们被Spring IOC容器初始化，装配，和管理。这些beans通过容器中配置的元数据创建。比如，以XML文件中"),e("code",[n._v("<bean/>")]),n._v("的形式定义。")]),e("p",[n._v("Spring 框架定义的beans都是单件beans。在bean tag中有个属性”singleton”，如果它被赋为TRUE，bean 就是单件，否则就是一个 prototype bean。默认是TRUE，所以所有在Spring框架中的beans 缺省都是单件。点击这里一图Spring Bean的生命周期。")]),e("p",[e("strong",[n._v("如何给Spring 容器提供配置元数据？")]),n._v("\n这里有三种重要的方法给Spring 容器提供配置元数据。\nXML配置文件。\n基于注解的配置。\n基于java的配置。")]),e("p",[e("strong",[n._v("解释Spring支持的几种bean的作用域")])]),e("p",[n._v("Spring框架支持以下五种bean的作用域：")]),e("ul",[e("li",[n._v("singleton : bean在每个Spring ioc 容器中只有一个实例。")]),e("li",[n._v("prototype：一个bean的定义可以有多个实例。")]),e("li",[n._v("request：每次http请求都会创建一个bean，该作用域仅在基于web的Spring ApplicationContext情形下有效。")]),e("li",[n._v("session：在一个HTTP Session中，一个bean定义对应一个实例。该作用域仅在基于web的Spring ApplicationContext情形下有效。")]),e("li",[n._v("global-session：在一个全局的HTTP Session中，一个bean定义对应一个实例。该作用域仅在基于web的Spring ApplicationContext情形下有效。\n缺省的Spring bean 的作用域是Singleton。")])]),e("p",[e("strong",[n._v("Spring框架中的单例bean是线程安全的吗？")]),n._v("\n不，Spring框架中的单例bean不是线程安全的。")]),e("p",[e("strong",[n._v("解释Spring框架中bean的生命周期")])]),e("ul",[e("li",[n._v("Spring容器 从XML 文件中读取bean的定义，并实例化bean。")]),e("li",[n._v("Spring根据bean的定义填充所有的属性。")]),e("li",[n._v("如果bean实现了BeanNameAware 接口，Spring 传递bean 的ID 到 setBeanName方法。")]),e("li",[n._v("如果Bean 实现了 BeanFactoryAware 接口， Spring传递beanfactory 给setBeanFactory 方法。")]),e("li",[n._v("如果有任何与bean相关联的BeanPostProcessors，Spring会在postProcesserBeforeInitialization()方法内调用它们。")]),e("li",[n._v("如果bean实现IntializingBean了，调用它的afterPropertySet方法，如果bean声明了初始化方法，调用此初始化方法。")]),e("li",[n._v("如果有BeanPostProcessors 和bean 关联，这些bean的postProcessAfterInitialization() 方法将被调用。")]),e("li",[n._v("如果bean实现了 DisposableBean，它将调用destroy()方法。")])]),e("p",[e("strong",[n._v("什么是基于Java的Spring注解配置? 给一些注解的例子")])]),e("p",[n._v("基于Java的配置，允许你在少量的Java注解的帮助下，进行你的大部分Spring配置而非通过XML文件。")]),e("p",[n._v("以@Configuration 注解为例，它用来标记类可以当做一个bean的定义，被Spring IOC容器使用。另一个例子是@Bean注解，它表示此方法将要返回一个对象，作为一个bean注册进Spring应用上下文。点击这里学习JAVA几大元注解。")]),e("p",[e("strong",[n._v("@Autowired 注解")])]),e("p",[n._v("@Autowired 注解提供了更细粒度的控制，包括在何处以及如何完成自动装配。它的用法和@Required一样，修饰setter方法、构造器、属性或者具有任意名称和/或多个参数的PN方法。")]),e("p",[e("strong",[n._v("@Qualifier 注解")])]),e("p",[n._v("当有多个相同类型的bean却只有一个需要自动装配时，将@Qualifier 注解和@Autowire 注解结合使用以消除这种混淆，指定需要装配的确切的bean。点击这里学习更多常用注解。")]),e("p",[e("strong",[n._v("Spring支持的事务管理类型")])]),e("p",[n._v("Spring支持两种类型的事务管理：")]),e("ul",[e("li",[n._v("编程式事务管理：这意味你通过编程的方式管理事务，给你带来极大的灵活性，但是难维护。")]),e("li",[n._v("声明式事务管理：这意味着你可以将业务代码和事务管理分离，你只需用注解和XML配置来管理事务。")])]),e("p",[e("strong",[n._v("什么是织入。什么是织入应用的不同点？")])]),e("p",[n._v("织入是将切面和到其他应用类型或对象连接或创建一个被通知对象的过程。\n织入可以在编译时，加载时，或运行时完成。")])])}],!1,null,null,null);a.default=i.exports}}]);